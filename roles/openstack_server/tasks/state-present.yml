---
# Copyright (c) 2020-2022 Jakob Meng, <jakobmeng@web.de>
# vim:set fileformat=unix tabstop=2 shiftwidth=2 expandtab:
# kate: end-of-line unix; space-indent on; indent-width 2; remove-trailing-spaces modified;

- name: Fail if vars have invalid values
  fail:
  when: >
    state not in ['present', 'absent'] or
    openstack_server_state not in ['active', 'paused', 'suspended', 'shutoff', 'shelved', 'shelved_offloaded'] or
    'name' in openstack_server_config or 'state' in openstack_server_config

- name: Load server facts
  include_tasks: "server_info.yml"

- name: Unshelve server before applying changes
  # OpenStack does not allow to apply changes to shelved instances
  when: openstack_server_info != None and
        openstack_server_info.status in ['SHELVED', 'SHELVED_OFFLOADED'] and
        openstack_server_state == 'active'
  block:
  - name: Unshelve server
    openstack.cloud.server_action:
      action: unshelve
      auth: "{{ openstack_server_config.auth if 'auth' in openstack_server_config else openstack_auth }}"
      cloud: "{{ openstack_server_config.cloud if 'cloud' in openstack_server_config else openstack_cloud }}"
      interface: "{{ openstack_server_config.interface if 'interface' in openstack_server_config else openstack_interface }}"
      server: '{{ openstack_server_name }}'

  - name: Wait for host to become usable
    wait_for:
      port: '{{ ansible_port|default(22) }}'
      host: '{{ ansible_host|default(openstack_server_name) }}'
      search_regex: OpenSSH
      connect_timeout: '{{ connection_timeout }}'
      delay: '{{ connection_delay }}'
    retries: '{{ connection_retries }}'
    vars:
      ansible_connection: local
      # For local connections use Python interpreter that is being used by Ansible on the controller.
      #
      # Rationale:
      # For local connections Ansible will not necessarily use the same Python interpreter that is being used by Ansible
      # on the controller. If Ansible on the controller is run from a virtual environment aka virtualenv, then Ansible
      # will use interpreter discovery to choose a Python interpreter for local connections anyway. To reuse the Python
      # interpreter from the controller, ansible_python_interpreter has to be set to ansible_playbook_python explicitly.
      #
      # Ref.:
      #  https://github.com/ansible/ansible/issues/16724
      #  https://willthames.github.io/2018/07/01/connection-local-vs-delegate_to-localhost.html
      #  https://docs.ansible.com/ansible/latest/user_guide/playbooks_delegation.html
      #  https://docs.ansible.com/ansible/latest/reference_appendices/interpreter_discovery.html
      ansible_python_interpreter: "{{ ansible_playbook_python }}"

  - name: Reload server facts
    include_tasks: "server_info.yml"

- name: Warn if compute instance is shelved and hence pending changes will be skipped
  when: openstack_server_info != None and openstack_server_info.status in ['SHELVED', 'SHELVED_OFFLOADED']
  fail:
    msg: |
        Compute instance {{ openstack_server_name }} is shelved, no modifications possible. Unshelve first to apply changes!
  ignore_errors: yes # noqa ignore-errors

- name: Create/Delete network ports and list server nics
  block:
  - name: Create/Delete network ports
    loop: '{{ openstack_server_ports }}'
    openstack.cloud.port: "{{ item
      |combine({} if 'auth' in item else {'auth': openstack_auth})
      |combine({} if 'cloud' in item else {'cloud': openstack_cloud})
      |combine({} if 'interface' in item else {'interface': openstack_interface})
    }}"
    when: item.network|default(None) != None

  - name: Retrieve network ports
    loop: "{{ openstack_server_ports }}"
    openstack.cloud.port_info:
      auth: "{{ item.auth if 'auth' in item else openstack_auth }}"
      cloud: "{{ item.cloud if 'cloud' in item else openstack_cloud }}"
      interface: "{{ item.interface if 'interface' in item else openstack_interface }}"
      port: '{{ item.name }}'
    when: item.state|default('present') == 'present'
    register: openstack_server_ports_info

  - name: Fail if network port does not exist or port name is ambiguous
    loop: "{{ openstack_server_ports_info.results|default([]) }}"
    fail:
      msg: 'Port {{ item.item.name }} does not exist or port name is ambiguous'
    when: item['openstack_ports']|length != 1

  - name: Prepare network port info
    set_fact:
      openstack_server_ports_info: "{{ openstack_server_ports_info.results|default([])|map(attribute='openstack_ports')|list|flatten(levels=1) }}"

  - name: Prepare server nics
    set_fact:
      openstack_server_nics: |-
        {% for item in openstack_server_ports_info %}
        - port-id: {{ item.id }}
        {% endfor %}
      openstack_server_ports_info: !!null

- name: List block storage volumes
  loop: "{{ ([openstack_server_config.boot_volume] if 'boot_volume' in openstack_server_config else []) +
            (openstack_server_config.volumes if 'volumes' in openstack_server_config else []) }}"
  openstack.cloud.volume_info:
    auth: '{{ openstack_auth }}'
    cloud: '{{ openstack_cloud }}'
    interface: '{{ openstack_interface }}'
    name: '{{ (item.display_name|default(item.name))|mandatory }}'
    details: no # we only need the volume ids
  when: item.state|default('present') == 'present'
  register: openstack_server_volumes_info

- name: Prepare storage volume info
  set_fact:
    openstack_server_volumes_info: "{{ openstack_server_volumes_info.results|selectattr('volumes', 'defined')|map(attribute='volumes')|list|flatten(levels=1)|list }}"

- name: Prepare server arguments
  # Why does Ansible fail to evaluate the Jinja2 Template below if it is passed to openstack.cloud.server directly?
  set_fact:
    # Drop floating_ips from openstack_server_config before passing to openstack.cloud.server because floating ips will
    # be assigned with is with module openstack.cloud.floating_ip later.
    #
    # Replace boot_volume and volumes from openstack_server_config with volume ids from openstack_server_volumes_info.
    openstack_server: "{{ openstack_server_config
    |combine({} if 'auth' in openstack_server_config else {'auth': openstack_auth})
    |combine({} if 'cloud' in openstack_server_config else {'cloud': openstack_cloud})
    |combine({} if 'interface' in openstack_server_config else {'interface': openstack_interface})
    |dict2items|rejectattr('key', 'eq', 'boot_volume')|list|items2dict
    |dict2items|rejectattr('key', 'eq', 'floating_ips')|list|items2dict
    |dict2items|rejectattr('key', 'eq', 'volumes')|list|items2dict
    |combine({
      'boot_volume': (openstack_server_volumes_info.0.id if 'boot_volume' in openstack_server_config else omit),
      'name': openstack_server_name,
      'nics': (openstack_server_config.nics if 'nics' in openstack_server_config else []) +
              (openstack_server_nics|from_yaml if openstack_server_nics|length > 0 else []),
      'state': state,
      'volumes': ((openstack_server_volumes_info[1:] if 'boot_volume' in openstack_server_config else
                  openstack_server_volumes_info)|map(attribute='id')|list|flatten(levels=1)|list)
    })
  }}"

- name: Create/Modify compute instance if it is not shelved
  when: openstack_server_info == None or openstack_server_info.status not in ['SHELVED', 'SHELVED_OFFLOADED']
  openstack.cloud.server: "{{ openstack_server }}"

- name: Warn if more than one floating ip should be assigned to server because older releases of Ansible's openstack.cloud.floating_ip module are flawed
  fail:
    msg: |
      Beware that older releases of Ansible's openstack.cloud.floating_ip module do not allow more than one floating ip
      being assigned to a server: If one adds a second floating ip to a fixed ip address in same nat_destination as the
      first floating ip, then the older openstack.cloud.floating_ip will just return with changed=false. Reason is, that
      it uses get_server_public_ip from python package openstacksdk which returns just one floating ip and
      openstack.cloud.floating_ip is happy as long as one is returned. If one adds a second floating ip to a fixed ip
      address in another nat_destination, then openstack.cloud.floating_ip will raise an error "server {server} already
      has a floating-ip on a different nat-destination than '{nat_destination}'".
      Ref.: https://storyboard.openstack.org/#!/story/2008181
  ignore_errors: yes # noqa ignore-errors
  when: openstack_server_floating_ips|length > 1

- name: Attach/Detach floating ips
  loop: "{{ openstack_server_floating_ips }}"
  openstack.cloud.floating_ip: "{{ item
    |combine({} if 'auth' in item else {'auth': openstack_auth})
    |combine({} if 'cloud' in item else {'cloud': openstack_cloud})
    |combine({} if 'interface' in item else {'interface': openstack_interface})
    |combine({} if 'server' in item else {'server': openstack_server_name})
  }}"
  register: openstack_server_floating_ips_result

- name: Check if floating ips got assigned as requested
  loop: '{{ openstack_server_floating_ips_result.results|default([]) }}'
  when: (item.item.state|default('present') == 'present' and
         item.invocation.module_args.fixed_address != None and
         item.invocation.module_args.fixed_address|length > 0 and
         item.floating_ip.fixed_ip_address != item.invocation.module_args.fixed_address) or
        (item.item.state|default('present') == 'present' and
         item.invocation.module_args.floating_ip_address != None and
         item.invocation.module_args.floating_ip_address|length > 0 and
         item.floating_ip.floating_ip_address != item.invocation.module_args.floating_ip_address)
  fail:
    msg: |
      Floating ips did not get assigned as requested! Check that floating ip's are valid within allocation pools.
      Beware that Ansible's openstack.cloud.floating_ip module will ignore argument 'floating_ip_address' if parameter
      'network' has been set. Hence it is likely that a different floating ip than the requested will be assigned. Older
      releases of Ansible's openstack.cloud.floating_ip module do not support attaching multiple floating ips to a
      server.
      Ref.: https://storyboard.openstack.org/#!/story/2008181

- name: Wait for host to setup, reboot and become usable
  when: openstack_server_info == None and openstack_server_state == 'active'
  pause:
    seconds: '{{ connection_delay_cloudinit }}'
