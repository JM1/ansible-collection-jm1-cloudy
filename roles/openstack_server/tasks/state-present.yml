---
# Copyright (c) 2020-2021 Jakob Meng, <jakobmeng@web.de>
# vim:set fileformat=unix tabstop=2 shiftwidth=2 expandtab:
# kate: end-of-line unix; space-indent on; indent-width 2; remove-trailing-spaces modified;

- name: Fail if required vars are not set
  fail:
  when: >
    openstack_server_name == None or openstack_server_name|length == 0 or
    openstack_server_state == None or openstack_server_state|length == 0

- name: Fail if vars have invalid values
  fail:
  when: >
    state not in ['present', 'absent'] or
    openstack_server_state not in ['active', 'paused', 'suspended', 'shutoff', 'shelved', 'shelved_offloaded']

- name: Load server facts
  import_role:
    name: "openstack_server_info"

- name: Unshelve server before applying changes
  # OpenStack does not allow to apply changes to shelved instances
  when: openstack_server_info != None and
        openstack_server_info.status in ['SHELVED', 'SHELVED_OFFLOADED'] and
        openstack_server_state == 'active'
  block:
  - name: Unshelve server
    openstack.cloud.server_action:
      action: unshelve
      auth: '{{ openstack_auth }}'
      cloud: '{{ openstack_cloud }}'
      interface: '{{ openstack_interface|default(omit) }}'
      server: '{{ openstack_server_name }}'

  - name: Wait for host to become usable
    wait_for:
      port: '{{ ansible_port|default(22) }}'
      host: '{{ ansible_host|default(openstack_server_name) }}'
      search_regex: OpenSSH
      connect_timeout: '{{ connection_timeout }}'
      delay: '{{ connection_delay }}'
    retries: '{{ connection_retries }}'
    vars:
      ansible_connection: local
      # For local connections use Python interpreter that is being used by Ansible on the controller.
      #
      # Rationale:
      # For local connections Ansible will not necessarily use the same Python interpreter that is being used by Ansible
      # on the controller. If Ansible on the controller is run from a virtual environment aka virtualenv, then Ansible
      # will use interpreter discovery to choose a Python interpreter for local connections anyway. To reuse the Python
      # interpreter from the controller, ansible_python_interpreter has to be set to ansible_playbook_python explicitly.
      #
      # Ref.:
      #  https://github.com/ansible/ansible/issues/16724
      #  https://willthames.github.io/2018/07/01/connection-local-vs-delegate_to-localhost.html
      #  https://docs.ansible.com/ansible/latest/user_guide/playbooks_delegation.html
      #  https://docs.ansible.com/ansible/latest/reference_appendices/interpreter_discovery.html
      ansible_python_interpreter: "{{ ansible_playbook_python }}"

  - name: Reload server facts
    import_role:
      name: "openstack_server_info"

- name: Warn if compute instance is shelved and hence pending changes will be skipped
  when: openstack_server_info != None and openstack_server_info.status in ['SHELVED', 'SHELVED_OFFLOADED']
  fail:
    msg: |
        Compute instance {{ openstack_server_name }} is shelved, no modifications possible. Unshelve first to apply changes!
  ignore_errors: yes # noqa ignore-errors

- name: Create network ports and list server nics
  block:
  - name: Create network ports
    loop: '{{ openstack_network_ports|default([]) }}'
    openstack.cloud.port:
      auth: '{{ openstack_auth }}'
      admin_state_up: '{{ item.admin_state_up|default(omit) }}'
      allowed_address_pairs: '{{ item.allowed_address_pairs|default([]) }}'
      cloud: '{{ openstack_cloud }}'
      device_id: '{{ item.device_id|default(omit) }}'
      device_owner: '{{ item.device_owner|default(omit) }}'
      extra_dhcp_opts: '{{ item.extra_dhcp_opts|default([]) }}'
      fixed_ips: '{{ item.fixed_ips|default([]) }}'
      interface: '{{ openstack_interface|default(omit) }}'
      mac_address: '{{ item.mac_address|default(omit) }}'
      name: '{{ item.name|mandatory }}'
      network: '{{ item.network|mandatory }}'
      no_security_groups: "{{ item.no_security_groups|default(omit) }}"
      port_security_enabled: '{{ item.port_security_enabled|default(omit) }}'
      region_name: '{{ item.region_name|default(omit) }}'
      security_groups: '{{ item.security_groups|default(omit) }}'
      state: present
      vnic_type: '{{ item.vnic_type|default(omit) }}'
    when: item.network|default(None) != None

  - name: Retrieve network ports
    loop: "{{ openstack_network_ports|default([]) }}"
    openstack.cloud.port_info:
      auth: '{{ openstack_auth }}'
      cloud: '{{ openstack_cloud }}'
      interface: '{{ openstack_interface|default(omit) }}'
      port: '{{ item.name }}'
    when: item.state|default('present') == 'present'
    register: openstack_port_info_result

  - name: Fail if network port does not exist or port name is ambiguous
    loop: "{{ openstack_port_info_result.results|default([]) }}"
    fail:
      msg: 'Port {{ item.item.name }} does not exist or port name is ambiguous'
    when: item['openstack_ports']|length != 1

  - name: Prepare network port info
    set_fact:
      _port_infos: "{{ openstack_port_info_result.results|default([])|map(attribute='openstack_ports')|list|flatten(levels=1) }}"
      openstack_port_info_result: !!null

  - name: Prepare server nics
    set_fact:
      openstack_server_nics: |-
          {% for item in _port_infos -%}port-id={{ item.id }}{% if not loop.last %},{% endif %}{%- endfor %}

- name: Generate Netplan configuration facts
  # openstack_netplan fact might be used in openstack_server_userdata
  import_role:
    name: "openstack_server_netplan"

- name: List block storage volumes
  loop: "{{ ([openstack_server_boot_volume] if openstack_server_boot_volume|default(None) != None else [])
            + openstack_server_volumes|default([]) }}"
  openstack.cloud.volume_info:
    auth: '{{ openstack_auth }}'
    cloud: '{{ openstack_cloud }}'
    interface: '{{ openstack_interface|default(omit) }}'
    name: '{{ (item.display_name|default(item.name))|mandatory }}'
    details: no # we only need the volume ids
  when: item.state|default('present') == 'present'
  register: openstack_volume_info_result

- name: Prepare storage volume info
  set_fact:
    openstack_volume_info: "{{ openstack_volume_info_result.results|selectattr('volumes', 'defined')|map(attribute='volumes')|list|flatten(levels=1)|list }}"
    openstack_volume_info_result: !!null

- name: Create/Modify compute instance if it is not shelved
  when: openstack_server_info == None or openstack_server_info.status not in ['SHELVED', 'SHELVED_OFFLOADED']
  openstack.cloud.server:
    auth: '{{ openstack_auth }}'
    auto_ip: '{{ openstack_server_auto_ip|default(omit) }}'
    boot_from_volume: '{{ openstack_server_boot_from_volume|default(omit) }}'
    boot_volume: "{{
        openstack_volume_info.0.id
            if openstack_server_boot_volume|default(None) != None and
               openstack_server_boot_volume.state|default('present') == 'present'
            else omit
    }}"
    cloud: '{{ openstack_cloud }}'
    config_drive: '{{ openstack_server_config_drive|default(omit) }}'
    delete_fip: '{{ openstack_server_delete_fip|default(omit) }}'
    flavor: '{{ openstack_server_flavor|default(omit) }}'
    flavor_include: '{{ openstack_server_flavor_include|default(omit) }}'
    flavor_ram: '{{ openstack_server_flavor_ram|default(omit) }}'
    floating_ip_pools: '{{ openstack_server_floating_ip_pools|default(omit) }}'
    floating_ips: '{{ omit }}' # openstack_server_floating_ips is used with module openstack.cloud.floating_ip below
    image: '{{ openstack_server_image|default(omit) }}'
    image_exclude: '{{ openstack_server_image_exclude|default(omit) }}'
    interface: '{{ openstack_interface|default(omit) }}'
    key_name: '{{ openstack_server_key_name|default(omit) }}'
    meta: '{{ openstack_server_meta|default(omit) }}'
    name: '{{ openstack_server_name|mandatory }}'
    network: '{{ openstack_server_network|default(omit) }}'
    nics: "{{ openstack_server_nics }}"
    reuse_ips: '{{ openstack_server_reuse_ips|default(omit) }}'
    scheduler_hints: '{{ openstack_server_scheduler_hints|default(omit) }}'
    security_groups: '{{ openstack_server_security_groups|default(omit) }}'
    state: present
    terminate_volume: '{{ openstack_server_terminate_volume|default(omit) }}'
    userdata: '{{ openstack_server_userdata|default(omit) }}'
    volume_size: '{{ openstack_server_volume_size|default(omit) }}'
    volumes: "{{ (
        openstack_volume_info[1:]
            if openstack_server_boot_volume|default(None) != None and
               openstack_server_boot_volume.state|default('present') == 'present'
            else openstack_volume_info
        )|map(attribute='id')|list|flatten(levels=1)|list }}"
  register: openstack_server_result

- name: Warn if more than one floating ip should be assigned to server because older releases of Ansible's openstack.cloud.floating_ip module are flawed
  fail:
    msg: |
      Beware that older releases of Ansible's openstack.cloud.floating_ip module do not allow more than one floating ip
      being assigned to a server: If one adds a second floating ip to a fixed ip address in same nat_destination as the
      first floating ip, then the older openstack.cloud.floating_ip will just return with changed=false. Reason is, that
      it uses get_server_public_ip from python package openstacksdk which returns just one floating ip and
      openstack.cloud.floating_ip is happy as long as one is returned. If one adds a second floating ip to a fixed ip
      address in another nat_destination, then openstack.cloud.floating_ip will raise an error "server {server} already
      has a floating-ip on a different nat-destination than '{nat_destination}'".
      Ref.: https://storyboard.openstack.org/#!/story/2008181
  ignore_errors: yes # noqa ignore-errors
  when: openstack_server_floating_ips is defined and openstack_server_floating_ips|length > 1

- name: Attach floating ips
  loop: "{{ openstack_server_floating_ips|default([]) }}"
  openstack.cloud.floating_ip:
    auth: '{{ openstack_auth }}'
    cloud: '{{ openstack_cloud }}'
    fixed_address: '{{ item.fixed_address|default(omit) }}'
    floating_ip_address: '{{ item.floating_ip_address|default(omit) }}'
    interface: '{{ openstack_interface|default(omit) }}'
    nat_destination: '{{ item.nat_destination|default(omit) }}'
    network: '{{ item.network|default(omit) }}'
    purge: '{{ item.purge|default(omit) }}'
    reuse: '{{ item.reuse|default(omit) }}'
    server: '{{ (item.server|default(openstack_server_name))|mandatory }}'
    state: present
    wait: '{{ item.wait|default(omit) }}'
  register: openstack_floating_ip_result

- name: Check if floating ips got assigned as requested
  loop: '{{ openstack_floating_ip_result.results|default([]) }}'
  when: (item.invocation.module_args.fixed_address != None and
         item.invocation.module_args.fixed_address|length > 0 and
         item.floating_ip.fixed_ip_address != item.invocation.module_args.fixed_address) or
        (item.invocation.module_args.floating_ip_address != None and
         item.invocation.module_args.floating_ip_address|length > 0 and
         item.floating_ip.floating_ip_address != item.invocation.module_args.floating_ip_address)
  fail:
    msg: |
      Floating ips did not get assigned as requested! Check that floating ip's are valid within allocation pools.
      Beware that Ansible's openstack.cloud.floating_ip module will ignore argument 'floating_ip_address' if parameter
      'network' has been set. Hence it is likely that a different floating ip than the requested will be assigned. Older
      releases of Ansible's openstack.cloud.floating_ip module do not support attaching multiple floating ips to a
      server.
      Ref.: https://storyboard.openstack.org/#!/story/2008181

- name: Wait for host to setup, reboot and become usable
  when: openstack_server_info == None and openstack_server_state == 'active'
  pause:
    seconds: '{{ connection_delay_cloudinit }}'

- name: Debug role variables
  debug:
    msg:
      openstack_server_nics: '{{ openstack_server_nics }}'
      openstack_volume_info: '{{ openstack_volume_info }}'
      openstack_server_result: '{{ openstack_server_result }}'
      openstack_floating_ip_result: '{{ openstack_floating_ip_result }}'
  tags:
    - never
    - debug
