---
# Copyright (c) 2020-2021 Jakob Meng, <jakobmeng@web.de>
# vim:set fileformat=unix tabstop=2 shiftwidth=2 expandtab:
# kate: end-of-line unix; space-indent on; indent-width 2; remove-trailing-spaces modified;

- name: Fail if required vars are not set
  fail:
  when: >
    openstack_server_name == None or openstack_server_name|length == 0

- name: Fetch network ports and list server nics
  block:
  - name: Retrieve network ports
    loop: "{{ openstack_server_ports|default([]) }}"
    openstack.cloud.port_info:
      auth: '{{ openstack_auth }}'
      cloud: '{{ openstack_cloud }}'
      interface: '{{ openstack_interface|default(omit) }}'
      port: '{{ item.name }}'
    register: openstack_port_info_result

  - name: Fail if network port does not exist or port name is ambiguous
    loop: "{{ openstack_port_info_result.results|default([]) }}"
    fail:
      msg: 'Port {{ item.item.name }} does not exist or port name is ambiguous'
    when: item['openstack_ports']|length != 1

  - name: Prepare network port info
    set_fact:
      _port_infos: "{{ openstack_port_info_result.results|default([])|map(attribute='openstack_ports')|list|flatten(levels=1) }}"
      openstack_port_info_result: !!null

- name: Build cloud-init network-config from OpenStack subnets and ports
  block:
  - name: Prepare network port names
    set_fact:
      # get number of network ports:
      #   openstack_server_ports|length
      # get network port indices:
      #  range(0, openstack_server_ports|length, 1)|list
      _port_names: |
        {{
            []|zip_longest(
                range(0, openstack_server_ports|length, 1)|list,
                fillvalue='eth'
            )|map('join', '')|list
            if openstack_server_ports|default([])|length > 0 else []
        }}

  - name: Extract subnet ids
    set_fact:
      subnet_ids: "{{ _port_infos|map(attribute='fixed_ips')|list|flatten(levels=1)|list|map(attribute='subnet_id')|list|unique }}"

  - name: Retrieve subnet infos
    loop: '{{ subnet_ids }}'
    openstack.cloud.subnets_info:
      auth: '{{ openstack_auth }}'
      cloud: '{{ openstack_cloud }}'
      interface: '{{ openstack_interface|default(omit) }}'
      subnet: "{{ item }}"
    register: openstack_subnets_info_result

  - name: Prepare subnet infos and ports
    set_fact:
      _subnet_infos: "{{ openstack_subnets_info_result.results|items2dict(key_name='item', value_name='openstack_subnets') }}"
      _ports: "{{ _port_names|zip(_port_infos)|list }}"
      _port_infos: !!null
      _port_names: !!null
      openstack_subnets_info_result: !!null

  - name: Generate cloud-init network-config
    set_fact:
      openstack_netplan_generated: |
        {% if _ports|length > 0 %}
        ethernets:
        {% for dev, dev_cfg in _ports %}
          {{ dev }}:
        {% if 'mac_address' in dev_cfg %}
            match:
              macaddress: {{ dev_cfg.mac_address }}
        {% endif %}

            addresses:
        {% for fixed_ip in dev_cfg.fixed_ips %}
                - {{ fixed_ip.ip_address }}/{{ _subnet_infos[fixed_ip.subnet_id].0.cidr|ipaddr('prefix') }}
        {% endfor %}
        {% endfor %}

        # !ethernets
        {% endif %}

  - name: Merge cloud-init network-config with user supplied configuration
    set_fact:
      openstack_netplan: "{{
            openstack_netplan_generated|from_yaml|combine(
                openstack_netplan_extra|from_yaml if openstack_netplan_extra is defined and openstack_netplan_extra|length > 0 else {},
                recursive=True)
        }}"
      openstack_netplan_generated: !!null

- name: Debug role variables
  debug:
    msg:
      openstack_netplan: '{{ openstack_netplan }}'
  tags:
    - never
    - debug
