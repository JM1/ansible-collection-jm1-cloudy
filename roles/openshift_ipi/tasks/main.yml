---
# Copyright (c) 2023 Jakob Meng, <jakobmeng@web.de>
# vim:set fileformat=unix tabstop=2 shiftwidth=2 expandtab:
# kate: end-of-line unix; space-indent on; indent-width 2; remove-trailing-spaces modified;

- name: Install dependencies of collection jm1.pkg
  ansible.builtin.import_role:
    name: jm1.pkg.setup # If Ansible raises "ERROR! the role 'jm1.pkg.setup' was not found" then you might use the
                        # ansible-galaxy and the provided requirements.yml to install all missing role dependencies.

- name: Install necessary tools
  jm1.pkg.meta_pkg:
    name: "jm1-svc-openshift-ipi"
    version: "1"
    depends:
    # setfacl tool is used to set permissions on temporary files when becoming an unprivileged user
    # Ref.: https://stackoverflow.com/questions/46352173/ansible-failed-to-set-permissions-on-the-temporary#comment116424403_56379678
    - acl

- name: Expand paths for Ansible user
  become: false
  ansible.builtin.stat:
    path: '{{ item }}'
  loop:
  - '~'
  - '{{ openshift_ipi_config_dir }}'
  - '{{ openshift_ipi_install_dir }}'
  - '{{ openshift_ipi_pullsecret_file }}'
  register: openshift_ipi_paths

- name: Extract paths for Ansible user
  ansible.builtin.set_fact:
    # openshift_ipi_paths.results.*.stat.path is returned for existing paths only
    openshift_ipi_home_dir: '{{ openshift_ipi_paths.results.0.invocation.module_args.path }}'
    openshift_ipi_config_dir: '{{ openshift_ipi_paths.results.1.invocation.module_args.path }}'
    openshift_ipi_install_dir: '{{ openshift_ipi_paths.results.2.invocation.module_args.path }}'
    openshift_ipi_pullsecret_file: '{{ openshift_ipi_paths.results.3.invocation.module_args.path }}'

- name: Create config directory for openshift-install
  ansible.builtin.file:
    group: '{{ ansible_user }}'
    mode: u=rwx,g=rx,o=
    owner: '{{ ansible_user }}'
    path: '{{ openshift_ipi_config_dir }}'
    state: directory

- name: Check if manifests have been generated with openshift-install
  ansible.builtin.stat:
    path: '{{ openshift_ipi_config_dir }}/manifests'
  register: openshift_ipi_path_manifests

- name: Check if auth has been generated with openshift-install
  ansible.builtin.stat:
    path: '{{ openshift_ipi_config_dir }}/auth'
  register: openshift_ipi_path_auth

- name: Create install-config.yaml for openshift-install
  # openshift-install will delete install-config.yaml when generating manifests
  # openshift-install will delete manifests when cluster has been created
  when: not openshift_ipi_path_manifests.stat.exists and not openshift_ipi_path_auth.stat.exists
  ansible.builtin.template:
    dest: '{{ openshift_ipi_config_dir }}/install-config.yaml'
    group: '{{ ansible_user }}'
    mode: u=rw,g=r,o=
    owner: '{{ ansible_user }}'
    src: install-config.yaml.j2

- name: Create pull secret for openshift-install
  when: openshift_ipi_pullsecret | default(None) != None
  ansible.builtin.template:
    dest: '{{ openshift_ipi_pullsecret_file }}'
    group: '{{ ansible_user }}'
    mode: u=rw,g=r,o=
    owner: '{{ ansible_user }}'
    src: pull-secret.txt.j2

- name: Extract openshift-install
  become: true
  become_flags: '--preserve-env=PATH'
  ansible.builtin.shell: # noqa risky-shell-pipe
    chdir: '{{ openshift_ipi_home_dir }}'
    cmd: |
      oc adm release extract \
        {{ ('--registry-config ' + openshift_ipi_pullsecret_file)
           if openshift_ipi_pullsecret | default(None) != None
           else ''
        }} \
        --command=openshift-install \
        --to '{{ openshift_ipi_install_dir }}/' \
        '{{ openshift_ipi_release_image | mandatory }}'
    creates: '{{ openshift_ipi_install_dir }}/openshift-install'

- name: Get openshift-install version
  become: false
  changed_when: false
  ansible.builtin.command:
    chdir: '{{ openshift_ipi_home_dir }}'
    cmd: openshift-install version
  register: openshift_ipi_openshift_install_version

- name: Print openshift-install version
  ansible.builtin.debug:
    msg: '{{ openshift_ipi_openshift_install_version.stdout_lines }}'

- name: Generate manifests for OpenShift Installer-provisioned installation (IPI)
  # openshift-install will delete manifests when cluster has been created
  when: not openshift_ipi_path_auth.stat.exists
  # Own manifests by Ansible user
  become: true
  become_flags: '--preserve-env=PATH'
  become_user: '{{ ansible_user }}'
  ansible.builtin.command:
    chdir: '{{ openshift_ipi_home_dir }}'
    cmd: openshift-install --dir '{{ openshift_ipi_config_dir }}' --log-level debug create manifests
    creates: '{{ openshift_ipi_config_dir }}/manifests'

- name: Run OpenShift Installer-provisioned installation (IPI)
  # Run command as Ansible user and preserve environment variable SSH_AUTH_SOCK
  # which is required for SSH agent forwarding to the bootstrap virtual machine
  become: true
  become_user: '{{ ansible_user }}'
  become_flags: '--preserve-env=PATH,SSH_AUTH_SOCK'
  ansible.builtin.shell:
    chdir: '{{ openshift_ipi_home_dir }}'
    cmd: |
      # The sudo below is required to run the openshift-install command with all group memberships, esp. kvm
      # and libvirt. Without sudo the user which runs openshift-install will only be in group ansible.
      sudo -u '{{ ansible_user }}' --preserve-env=SSH_AUTH_SOCK \
        openshift-install --dir '{{ openshift_ipi_config_dir }}' --log-level debug create cluster
    creates: '{{ openshift_ipi_config_dir }}/auth/kubeconfig'
  register: openshift_ipi_cluster_creation

- name: Print results of OpenShift Installer-provisioned installation (IPI)
  ansible.builtin.debug:
    var: openshift_ipi_cluster_creation.stdout_lines
