---
# Copyright (c) 2020-2021 Jakob Meng, <jakobmeng@web.de>
# vim:set fileformat=unix tabstop=2 shiftwidth=2 expandtab:
# kate: end-of-line unix; space-indent on; indent-width 2; remove-trailing-spaces modified;

- name: Install, upgrade or remove packages
  when: # packages is a list with dictionaries and maybe strings
        # task will fail if list has other types
        packages is iterable and packages is not mapping and packages|length > 0 and
        (packages|map('type_debug')|unique|length > 1 or packages|first is mapping)
  failed_when: packages_dicts_list_result.failed or not (item is mapping or item is string)
  loop: '{{ packages if packages is iterable and packages is not mapping else [] }}'
  package:
    name: '{{ item.name|default(omit) if item is mapping else item }}'
    state: "{{ item.state|default(omit) if item is mapping else 'present' }}"
    use: '{{ item.use|default(omit) if item is mapping else omit }}'
  register: packages_dicts_list_result

- name: Install, upgrade or remove packages
  when: packages is mapping # dictionary
  package:
    name: '{{ packages.name|mandatory }}'
    state: "{{ packages.state|default(omit) }}"
    use: '{{ packages.use|default(omit) }}'
  register: packages_dict_result

- name: Bulk install packages
  when: # packages is a list of strings
        packages is iterable and packages is not mapping and
        packages|map('type_debug')|unique|length == 1 and packages|first is string
  package:
    name: '{{ packages }}'
    state: 'present'
  register: packages_strings_list_result

- name: Debug role variables
  debug:
    msg:
      packages_dicts_list_result: '{{ packages_dicts_list_result }}'
      packages_dict_result: '{{ packages_dict_result }}'
      packages_strings_list_result: '{{ packages_strings_list_result }}'
  tags:
    - never
    - debug
