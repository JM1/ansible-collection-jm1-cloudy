---
# Copyright (c) 2021 Jakob Meng, <jakobmeng@web.de>
# vim:set fileformat=unix tabstop=2 shiftwidth=2 expandtab:
# kate: end-of-line unix; space-indent on; indent-width 2; remove-trailing-spaces modified;

# Prepare server installers for multiple operating systems, i.e. Debian's Preseed, CentOS' Kickstart and Ubuntu's
# autoinstall, using PXELINUX for BIOS based systems and GRUB2 for UEFI based systems.
#
# NOTE: This role will not set up the http server nor the tftp server!
#       It will merely create a directory hierarchies
#       within the httpd and tftpd root directories.
#
# Ref.:
# https://wiki.syslinux.org/wiki/index.php?title=PXELINUX
# https://www.gnu.org/software/grub/manual/grub/html_node/Network.html
# https://wiki.debian.org/PXEBootInstall
# https://www.redhat.com/sysadmin/pxe-boot-uefi
# https://ubuntu.com/server/docs/install/netboot-arm64
# https://wiki.debian.org/DebianInstaller/Preseed
# https://www.debian.org/releases/stable/amd64/apb.en.html
# https://ubuntu.com/server/docs/install/netboot-amd64
# https://docs.centos.org/en-US/centos/install-guide/pxe-server/
# https://docs.centos.org/en-US/centos/install-guide/Kickstart2/
# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/performing_an_advanced_rhel_installation/index

- name: Install dependencies of collection jm1.pkg
  import_role:
    name: jm1.pkg.setup # If Ansible raises "ERROR! the role 'jm1.pkg.setup' was not found" then you might use the
                        # ansible-galaxy and the provided requirements.yml to install all missing role dependencies.

- name: Create tftpd directory
  file:
    path: '{{ pxe_installer_tftpd_root }}'
    state: directory
    mode: u=rwx,g=rx,o=rx
    owner: root
    group: nogroup

- name: Satisfy requirements on CentOS and Red Hat Enterprise Linux
  when: distribution_id|first in ['CentOS', 'Red Hat Enterprise Linux']
  jm1.pkg.meta_pkg:
    name: "jm1-svc-pxe-installer"
    version: "1"
    depends:
    - cpio
    - p7zip # 7z
    - tar
    - xz

- name: Satisfy requirements on Debian and Ubuntu
  when: distribution_id|first in ['Debian', 'Ubuntu']
  jm1.pkg.meta_pkg:
    name: "jm1-svc-pxe-installer"
    version: "1"
    depends:
    - cpio
    - p7zip-full # 7z
    - tar
    - xz-utils

- name: Prepare server installer for CentOS 7 and CentOS 8
  block:
  - name: Create tftpd subdirectories
    file:
      path: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/grub'
      state: directory
      mode: u=rwx,g=rx,o=rx
      owner: root
      group: nogroup
    loop:
    - ['CentOS', '7', 'amd64']
    - ['CentOS', '8', 'amd64']

  - name: Create httpd subdirectories for isos
    file:
      path: "{{ pxe_installer_httpd_root }}/archive/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/os/"
      state: directory
      mode: u=rwx,g=rx,o=rx
      owner: root
      group: nogroup
    loop:
    - ['CentOS', '7', 'amd64']
    - ['CentOS', '8', 'amd64']

  - name: Check if isos exist
    stat:
      path: '{{ pxe_installer_httpd_root }}/archive/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/centos.iso'
    register: stats
    loop:
    - ['CentOS', '7', 'amd64']
    - ['CentOS', '8', 'amd64']

  - name: Download iso if the do not exist
    when: not item.stat.exists # else Ansible's get_url would download it anyway
    get_url:
      url: "{{ lookup('vars', 'pxe_installer_files_' + item.item.0|lower + '_' + item.item.1 + '_' + item.item.2) }}"
      dest: '{{ pxe_installer_httpd_root }}/archive/{{ item.item.0 }}_{{ item.item.1 }}/{{ item.item.2 }}/centos.iso'
    loop: '{{ stats.results }}'

  - name: Extract files from iso and set search and read permissions for all users
    shell:
      chdir: '{{ pxe_installer_httpd_root }}/archive/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/os/'
      cmd: 7z x -aoa ../centos.iso && chmod -R a+r . && find . -type d -exec chmod a+rx '{}' \;
      creates: '{{ pxe_installer_httpd_root }}/archive/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/os/EFI'
    loop:
    - ['CentOS', '7', 'amd64']
    - ['CentOS', '8', 'amd64']

  - name: Extract shim rpm
    shell:
      chdir: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/'
      cmd: |-
        7z x -aoa '{{ pxe_installer_httpd_root }}/archive/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/os/'\
        '{% if item.1 == '8' %}BaseOS/{% endif %}Packages/shim-x64-'*.rpm && \
        if [ -f *.cpio.xz ]; then unxz -v *.cpio.xz; fi && \
        ls * && \
        cpio -dimv --file shim*.cpio ./boot/efi/EFI/centos/shimx64.efi && \
        rm -v shim*.cpio && \
        mv -v ./boot/efi/EFI/centos/shimx64.efi . && \
        chmod a+r shimx64.efi && \
        rmdir -p boot/efi/EFI/centos/
      creates: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/shimx64.efi'
    loop:
    - ['CentOS', '7', 'amd64']
    - ['CentOS', '8', 'amd64']

  - name: Copy grubx64.efi
    copy:
      src: "{{ pxe_installer_httpd_root }}/archive/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/os/EFI/BOOT/grubx64.efi"
      dest: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/grubx64.efi.orig'
      remote_src: yes
      mode: u=rwx,g=rx,o=rx
      owner: root
      group: root
    loop:
    - ['CentOS', '7', 'amd64']
    - ['CentOS', '8', 'amd64']

  - name: Patch CentOS 7 installer path in grubx64.efi
    shell: # noqa command-instead-of-module
      chdir: '{{ pxe_installer_tftpd_root }}/CentOS_7/amd64'
      # /EFI/BOOT => /CentOS_7/amd64/grub
      cmd: |-
        sed -e 's/\x2F\x45\x46\x49\x2F\x42\x4F\x4F\x54\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00/'\
        '\x2F\x43\x65\x6E\x74\x4F\x53\x5F\x37\x2F\x61\x6D\x64\x36\x34\x2F\x67\x72\x75\x62\x00'\
        '/g' 'grubx64.efi.orig' > 'grubx64.efi'
      creates: '{{ pxe_installer_tftpd_root }}/CentOS_7/amd64/grubx64.efi'

  - name: Patch CentOS 8 installer path in grubx64.efi
    shell: # noqa command-instead-of-module
      chdir: '{{ pxe_installer_tftpd_root }}/CentOS_8/amd64'
      # /EFI/BOOT => /CentOS_8/amd64/grub
      cmd: |-
        sed -e 's/\x2F\x45\x46\x49\x2F\x42\x4F\x4F\x54\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00/'\
        '\x2F\x43\x65\x6E\x74\x4F\x53\x5F\x38\x2F\x61\x6D\x64\x36\x34\x2F\x67\x72\x75\x62\x00'\
        '/g' 'grubx64.efi.orig' > 'grubx64.efi'
      creates: '{{ pxe_installer_tftpd_root }}/CentOS_8/amd64/grubx64.efi'

  - name: Extract syslinux-tftpboot rpm
    shell:
      chdir: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/'
      cmd: |-
        7z x -aoa '{{ pxe_installer_httpd_root }}/archive/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/os/'\
        '{% if item.1 == '8' %}BaseOS/{% endif %}Packages/syslinux-tftpboot-'*.rpm && \
        if [ -f *.cpio.xz ]; then unxz -v *.cpio.xz; fi && \
        cpio -dimv --file syslinux-tftpboot*.cpio \
          ./tftpboot/pxelinux.0 ./var/lib/tftpboot/pxelinux.0 \
          ./tftpboot/*.c32 ./var/lib/tftpboot/*.c32 \
          && \
        rm -v syslinux-tftpboot*.cpio && \
        if [ -d tftpboot ]; then \
          mv tftpboot/* . && rmdir tftpboot; \
        else \
          mv var/lib/tftpboot/* . && rmdir -p var/lib/tftpboot; \
        fi && \
        mkdir pxelinux.cfg
      creates: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/pxelinux.cfg'
    loop:
    - ['CentOS', '7', 'amd64']
    - ['CentOS', '8', 'amd64']

  - name: Copy kernel from extracted iso
    copy:
      src: "{{ pxe_installer_httpd_root }}/archive/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/os/isolinux/vmlinuz"
      dest: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/vmlinuz'
      remote_src: yes
      mode: u=rw,g=r,o=r
      owner: root
      group: root
    loop:
    - ['CentOS', '7', 'amd64']
    - ['CentOS', '8', 'amd64']

  - name: Copy initrd from extracted iso
    copy:
      src: "{{ pxe_installer_httpd_root }}/archive/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/os/isolinux/initrd.img"
      dest: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/initrd.img'
      remote_src: yes
      mode: u=rw,g=r,o=r
      owner: root
      group: root
    loop:
    - ['CentOS', '7', 'amd64']
    - ['CentOS', '8', 'amd64']

  - name: Change uefi config
    copy:
      content: |
        source $prefix/grub.cfg-$net_default_mac
      dest: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/grub/grub.cfg'
      mode: u=rw,g=r,o=r
      owner: root
      group: root
    loop:
    - ['CentOS', '7', 'amd64']
    - ['CentOS', '8', 'amd64']

  - name: Create host-specific pxelinux config for CentOS 7 and CentOS 8
    when: hostvars[item]['distribution_id'] in [['CentOS', '7'], ['CentOS', '8']]
          and hostvars[item]['os_architecture'] == 'x86_64'
    copy:
      content: |
        default vesamenu.c32
        timeout 20
        prompt 0
        display boot.msg

        label install
              menu label {{ hostvars[item]['distribution_id']|join(' ') }} Kickstart Install (BIOS, AMD64)
              kernel vmlinuz
              append initrd=initrd.img ip=dhcp inst.repo={{ pxe_installer_rpm_archive_url }}/archive/{{ hostvars[item]['distribution_id']|join('_') }}/amd64/os/ inst.ks={{ pxe_installer_kickstart_url }}/kickstarts/ks.cfg-{{ hostvars[item]['pxe_installer_client_mac']|lower|replace(':','-') }} {{ hostvars[item]['pxe_installer_kernel_parameters'] if 'pxe_installer_kernel_parameters' in hostvars[item] else lookup(vars, 'pxe_installer_kernel_parameters_' + hostvars[item]['distribution_id']|join('_')|lower + '_amd64') }} ---
      dest: "{{ pxe_installer_tftpd_root }}/{{ hostvars[item]['distribution_id']|join('_') }}/amd64/pxelinux.cfg/01-{{ hostvars[item]['pxe_installer_client_mac']|lower|replace(':','-') }}"
      mode: u=rw,g=r,o=r
      owner: root
      group: root
    loop: '{{ pxe_installer_clients }}'

  - name: Create host-specific grub config for CentOS 7 and CentOS 8
    when: hostvars[item]['distribution_id'] in [['CentOS', '7'], ['CentOS', '8']]
          and hostvars[item]['os_architecture'] == 'x86_64'
    copy:
      content: |
        set timeout=5

        if loadfont font.pf2; then
          set gfxmode=800x600
          set gfxpayload=keep
          terminal_output gfxterm
        fi

        set menu_color_normal=cyan/blue
        set menu_color_highlight=white/blue

        menuentry '{{ hostvars[item]['distribution_id']|join(' ') }} Kickstart Install (UEFI, AMD64)' {
            set background_color=black
            linuxefi /{{ hostvars[item]['distribution_id']|join('_') }}/amd64/vmlinuz ip=dhcp 'inst.repo={{ pxe_installer_rpm_archive_url }}/archive/{{ hostvars[item]['distribution_id']|join('_') }}/amd64/os/' 'inst.ks={{ pxe_installer_kickstart_url }}/kickstarts/ks.cfg-{{ hostvars[item]['pxe_installer_client_mac']|lower|replace(':','-') }}' {{ hostvars[item]['pxe_installer_kernel_parameters'] if 'pxe_installer_kernel_parameters' in hostvars[item] else lookup(vars, 'pxe_installer_kernel_parameters_' + hostvars[item]['distribution_id']|join('_')|lower + '_amd64') }} ---
            initrdefi /{{ hostvars[item]['distribution_id']|join('_') }}/amd64/initrd.img
        }
      dest: "{{ pxe_installer_tftpd_root }}/{{ hostvars[item]['distribution_id']|join('_') }}/amd64/grub/grub.cfg-{{ hostvars[item]['pxe_installer_client_mac']|lower }}"
      mode: u=rw,g=r,o=r
      owner: root
      group: root
    loop: '{{ pxe_installer_clients }}'

  - name: Create httpd subdirectory for Kickstart files
    file:
      path: "{{ pxe_installer_httpd_root }}/kickstarts/"
      state: directory
      mode: u=rwx,g=rx,o=rx
      owner: root
      group: nogroup

  - name: Create host-specific Kickstart files
    when: hostvars[item]['distribution_id'] in [['CentOS', '7'], ['CentOS', '8']]
          and hostvars[item]['os_architecture'] == 'x86_64'
          and 'kickstart_config' in hostvars[item]
    template:
      dest: "{{ pxe_installer_httpd_root }}/kickstarts/ks.cfg-{{ hostvars[item]['pxe_installer_client_mac']|lower|replace(':','-') }}"
      group: root
      mode: u=rw,g=r,o=r
      owner: root
      src: 'ks.cfg.j2'
    loop: "{{ pxe_installer_clients }}"

- name: Prepare server installer for Debian 10 (Buster) and Debian 11 (Bullseye)
  block:
  - name: Create tftpd subdirectory
    file:
      path: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}'
      state: directory
      mode: u=rwx,g=rx,o=rx
      owner: root
      group: nogroup
    loop:
    - ['Debian', '10', 'amd64']
    - ['Debian', '11', 'amd64']

  - name: Download netboot archive
    get_url:
      url: "{{ lookup('vars', 'pxe_installer_files_' + item.0|lower + '_' + item.1 + '_' + item.2) }}"
      dest: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/netboot.tar.gz'
    loop:
    - ['Debian', '10', 'amd64']
    - ['Debian', '11', 'amd64']

  - name: Extract netboot archive
    unarchive:
      src: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/netboot.tar.gz'
      dest: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/'
      remote_src: yes
      creates: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/debian-installer/{{ item.2 }}/grubx64.efi'
    loop:
    - ['Debian', '10', 'amd64']
    - ['Debian', '11', 'amd64']

  - name: Patch Debian 10 (Buster) installer path in grubx64.efi (will break UEFI Secure Boot signature)
    shell:
      chdir: '{{ pxe_installer_tftpd_root }}/Debian_10/amd64'
      cmd: |-
        mv 'debian-installer/amd64/grubx64.efi' 'debian-installer/amd64/grubx64.efi.orig' && \
        sed -e 's/\x64\x65\x62\x69\x61\x6E\x2D\x69\x6E\x73\x74\x61\x6C\x6C\x65\x72\x2F\x61\x6D\x64\x36\x34\x2F\x67\x72'\
        '\x75\x62\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00/\x44\x65\x62\x69\x61\x6E\x5F\x31'\
        '\x30\x2F\x61\x6D\x64\x36\x34\x2F\x64\x65\x62\x69\x61\x6E\x2D\x69\x6E\x73\x74\x61\x6C\x6C\x65\x72\x2F\x61\x6D'\
        '\x64\x36\x34\x2F\x67\x72\x75\x62\x00/g' 'debian-installer/amd64/grubx64.efi.orig' > \
        'debian-installer/amd64/grubx64.efi'
      creates: '{{ pxe_installer_tftpd_root }}/Debian_10/amd64/debian-installer/amd64/grubx64.efi.orig'

  - name: Patch Debian 11 (Bullseye) installer path in grubx64.efi (will break UEFI Secure Boot signature)
    shell:
      chdir: '{{ pxe_installer_tftpd_root }}/Debian_11/amd64'
      cmd: |-
        mv 'debian-installer/amd64/grubx64.efi' 'debian-installer/amd64/grubx64.efi.orig' && \
        sed -e 's/\x64\x65\x62\x69\x61\x6E\x2D\x69\x6E\x73\x74\x61\x6C\x6C\x65\x72\x2F\x61\x6D\x64\x36\x34\x2F\x67\x72'\
        '\x75\x62\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00/\x44\x65\x62\x69\x61\x6E\x5F\x31'\
        '\x31\x2F\x61\x6D\x64\x36\x34\x2F\x64\x65\x62\x69\x61\x6E\x2D\x69\x6E\x73\x74\x61\x6C\x6C\x65\x72\x2F\x61\x6D'\
        '\x64\x36\x34\x2F\x67\x72\x75\x62\x00/g' 'debian-installer/amd64/grubx64.efi.orig' > \
        'debian-installer/amd64/grubx64.efi'
      creates: '{{ pxe_installer_tftpd_root }}/Debian_11/amd64/debian-installer/amd64/grubx64.efi.orig'

  - name: Change uefi config
    copy:
      content: |
        source $prefix/grub.cfg-$net_default_mac
      dest: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/debian-installer/{{ item.2 }}/grub/grub.cfg'
      mode: u=rw,g=r,o=r
      owner: root
      group: root
    loop:
    - ['Debian', '10', 'amd64']
    - ['Debian', '11', 'amd64']

  - name: Create host-specific pxelinux config for Debian 10 (Buster)
    when: hostvars[item]['distribution_id'] == ['Debian', '10'] and hostvars[item]['os_architecture'] == 'x86_64'
    copy:
      content: |
        default install
        timeout 20
        prompt 0
        menu hshift 4
        menu width 70
        menu title Debian GNU/Linux installer menu (BIOS mode)
        label install
              menu label Debian 10 (Buster) Preseed Install (BIOS, AMD64)
              kernel /debian-installer/amd64/linux
              append vga=788 initrd=/debian-installer/amd64/initrd.gz auto=true hostname=unassigned-hostname domain=unassigned-domain url={{ pxe_installer_preseed_url }}/Debian_10/amd64/preseed.cfg-{{ hostvars[item]['pxe_installer_client_mac']|lower|replace(':','-') }} {{ hostvars[item]['pxe_installer_kernel_parameters'] if 'pxe_installer_kernel_parameters' in hostvars[item] else pxe_installer_kernel_parameters_debian_10_amd64 }} ---
      dest: "{{ pxe_installer_tftpd_root }}/Debian_10/amd64/debian-installer/amd64/pxelinux.cfg/01-{{ hostvars[item]['pxe_installer_client_mac']|lower|replace(':','-') }}"
      mode: u=rw,g=r,o=r
      owner: root
      group: root
    loop: '{{ pxe_installer_clients }}'

  - name: Create host-specific grub config for Debian 10 (Buster)
    when: hostvars[item]['distribution_id'] == ['Debian', '10'] and hostvars[item]['os_architecture'] == 'x86_64'
    copy:
      content: |
        set timeout=5

        if loadfont font.pf2; then
          set gfxmode=800x600
          set gfxpayload=keep
          terminal_output gfxterm
        fi

        set menu_color_normal=cyan/blue
        set menu_color_highlight=white/blue

        menuentry 'Debian 10 (Buster) Preseed Install (UEFI, AMD64)' {
            set background_color=black
            linux /Debian_10/amd64/debian-installer/amd64/linux vga=788 auto=true hostname=unassigned-hostname domain=unassigned-domain url={{ pxe_installer_preseed_url }}/Debian_10/amd64/preseed.cfg-{{ hostvars[item]['pxe_installer_client_mac']|lower|replace(':','-') }} {{ hostvars[item]['pxe_installer_kernel_parameters'] if 'pxe_installer_kernel_parameters' in hostvars[item] else pxe_installer_kernel_parameters_debian_10_amd64 }} ---
            initrd /Debian_10/amd64/debian-installer/amd64/initrd.gz
        }
      dest: "{{ pxe_installer_tftpd_root }}/Debian_10/amd64/debian-installer/amd64/grub/grub.cfg-{{ hostvars[item]['pxe_installer_client_mac']|lower }}"
      mode: u=rw,g=r,o=r
      owner: root
      group: root
    loop: '{{ pxe_installer_clients }}'

  - name: Create host-specific pxelinux config for Debian 11 (Bullseye)
    when: hostvars[item]['distribution_id'] == ['Debian', '11'] and hostvars[item]['os_architecture'] == 'x86_64'
    copy:
      content: |
        default install
        timeout 20
        prompt 0
        menu hshift 4
        menu width 70
        menu title Debian GNU/Linux installer menu (BIOS mode)
        label install
              menu label Debian 11 (Bullseye) Preseed Install (BIOS, AMD64)
              kernel /debian-installer/amd64/linux
              append vga=788 initrd=/debian-installer/amd64/initrd.gz auto=true hostname=unassigned-hostname domain=unassigned-domain url={{ pxe_installer_preseed_url }}/Debian_11/amd64/preseed.cfg-{{ hostvars[item]['pxe_installer_client_mac']|lower|replace(':','-') }} {{ hostvars[item]['pxe_installer_kernel_parameters'] if 'pxe_installer_kernel_parameters' in hostvars[item] else pxe_installer_kernel_parameters_debian_11_amd64 }} ---
      dest: "{{ pxe_installer_tftpd_root }}/Debian_11/amd64/debian-installer/amd64/pxelinux.cfg/01-{{ hostvars[item]['pxe_installer_client_mac']|lower|replace(':','-') }}"
      mode: u=rw,g=r,o=r
      owner: root
      group: root
    loop: '{{ pxe_installer_clients }}'

  - name: Create host-specific grub config for Debian 11 (Bullseye)
    when: hostvars[item]['distribution_id'] == ['Debian', '11'] and hostvars[item]['os_architecture'] == 'x86_64'
    copy:
      content: |
        set timeout=5

        if loadfont font.pf2; then
          set gfxmode=800x600
          set gfxpayload=keep
          terminal_output gfxterm
        fi

        set menu_color_normal=cyan/blue
        set menu_color_highlight=white/blue

        menuentry 'Debian 11 (Bullseye) Preseed Install (UEFI, AMD64)' {
            set background_color=black
            linux /Debian_11/amd64/debian-installer/amd64/linux vga=788 auto=true hostname=unassigned-hostname domain=unassigned-domain url={{ pxe_installer_preseed_url }}/Debian_11/amd64/preseed.cfg-{{ hostvars[item]['pxe_installer_client_mac']|lower|replace(':','-') }} {{ hostvars[item]['pxe_installer_kernel_parameters'] if 'pxe_installer_kernel_parameters' in hostvars[item] else pxe_installer_kernel_parameters_debian_11_amd64 }} ---
            initrd /Debian_11/amd64/debian-installer/amd64/initrd.gz
        }
      dest: "{{ pxe_installer_tftpd_root }}/Debian_11/amd64/debian-installer/amd64/grub/grub.cfg-{{ hostvars[item]['pxe_installer_client_mac']|lower }}"
      mode: u=rw,g=r,o=r
      owner: root
      group: root
    loop: '{{ pxe_installer_clients }}'

  - name: Create host-specific preseed config
    when: hostvars[item]['distribution_id'] in [['Debian', '10'], ['Debian', '11']]
          and hostvars[item]['os_architecture'] == 'x86_64'
    template:
      dest: "{{ pxe_installer_tftpd_root }}/{{ hostvars[item]['distribution_id']|join('_') }}/amd64/preseed.cfg-{{ hostvars[item]['pxe_installer_client_mac']|lower|replace(':','-') }}"
      group: root
      mode: u=rw,g=r,o=r
      owner: root
      src: preseed.cfg.j2
    loop: '{{ pxe_installer_clients }}'

- name: Prepare server installer for Red Hat Enterprise Linux (RHEL) 7
  meta: noop
  # TODO: Implement server installer for Red Hat Enterprise Linux (RHEL) 7

- name: Prepare server installer for Red Hat Enterprise Linux (RHEL) 8
  meta: noop
  # TODO: Implement server installer for Red Hat Enterprise Linux (RHEL) 8

- name: Prepare server installer for Ubuntu 18.04 LTS (Bionic Beaver) and Ubuntu 20.04 LTS (Focal Fossa)
  block:
  - name: Create tftpd subdirectory
    file:
      path: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}'
      state: directory
      mode: u=rwx,g=rx,o=rx
      owner: root
      group: nogroup
    loop:
    - ['Ubuntu', '18.04', 'amd64']
    - ['Ubuntu', '20.04', 'amd64']

  - name: Download efi
    get_url:
      url: "{{ lookup('vars', 'pxe_installer_files_' + item.0|lower + '_' + item.1|replace('.','') + '_' + item.2).efi }}"
      dest: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/grubnetx64.efi'
    loop:
    - ['Ubuntu', '18.04', 'amd64']
    - ['Ubuntu', '20.04', 'amd64']

  - name: Download iso
    get_url:
      url: "{{ lookup('vars', 'pxe_installer_files_' + item.0|lower + '_' + item.1|replace('.','') + '_' + item.2).iso }}"
      dest: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/ubuntu.iso'
    loop:
    - ['Ubuntu', '18.04', 'amd64']
    - ['Ubuntu', '20.04', 'amd64']

  - name: Download netboot archive
    get_url:
      url: "{{ lookup('vars', 'pxe_installer_files_' + item.0|lower + '_' + item.1|replace('.','') + '_' + item.2).pxe }}"
      dest: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/netboot.tar.gz'
    loop:
    - ['Ubuntu', '18.04', 'amd64']
    - ['Ubuntu', '20.04', 'amd64']

  - name: Extract files from iso
    command:
      chdir: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/'
      cmd: 7z x -aoa ubuntu.iso boot/grub/font.pf2 casper/initrd casper/vmlinuz
      creates: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/casper/initrd'
    loop:
    - ['Ubuntu', '18.04', 'amd64']
    - ['Ubuntu', '20.04', 'amd64']

  - name: Preprocess files from iso
    shell:
      chdir: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/'
      cmd: mv boot/grub . && chmod u=rwx,g=rx,o=rx grub casper
      creates: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/grub'
    loop:
    - ['Ubuntu', '18.04', 'amd64']
    - ['Ubuntu', '20.04', 'amd64']

  - name: Extract netboot archive
    unarchive:
      src: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/netboot.tar.gz'
      dest: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/'
      remote_src: yes
      creates: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/pxelinux.0'
    loop:
    - ['Ubuntu', '18.04', 'amd64']
    - ['Ubuntu', '20.04', 'amd64']

  - name: Preprocess netboot archive
    file:
      path: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/ubuntu-installer/{{ item.2 }}/linux'
      mode: u=rw,g=r,o=r
      owner: root
      group: root
    loop:
    - ['Ubuntu', '18.04', 'amd64']
    - ['Ubuntu', '20.04', 'amd64']

  - name: Patch Ubuntu 18.04 LTS (Bionic Beaver) installer path in grubnetx64.efi (will break UEFI Secure Boot signature)
    shell:
      chdir: '{{ pxe_installer_tftpd_root }}/Ubuntu_18.04/amd64'
      cmd: |-
        mv 'grubnetx64.efi' 'grubnetx64.efi.orig' && \
        sed -e 's/\x2F\x67\x72\x75\x62\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
        '\x00/\x2F\x55\x62\x75\x6E\x74\x75\x5F\x31\x38\x2E\x30\x34\x2F\x61\x6D\x64\x36\x34\x2F\x67\x72\x75\x62\x00/g' \
        'grubnetx64.efi.orig' > 'grubnetx64.efi'
      creates: '{{ pxe_installer_tftpd_root }}/Ubuntu_18.04/amd64/grubnetx64.efi.orig'

  - name: Patch Ubuntu 20.04 LTS (Focal Fossa) installer path in grubnetx64.efi (will break UEFI Secure Boot signature)
    shell:
      chdir: '{{ pxe_installer_tftpd_root }}/Ubuntu_20.04/amd64'
      cmd: |-
        mv 'grubnetx64.efi' 'grubnetx64.efi.orig' && \
        sed -e 's/\x2F\x67\x72\x75\x62\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
        '\x00/\x2F\x55\x62\x75\x6E\x74\x75\x5F\x32\x30\x2E\x30\x34\x2F\x61\x6D\x64\x36\x34\x2F\x67\x72\x75\x62\x00/g' \
        'grubnetx64.efi.orig' > 'grubnetx64.efi'
      creates: '{{ pxe_installer_tftpd_root }}/Ubuntu_20.04/amd64/grubnetx64.efi.orig'

  - name: Change uefi config
    copy:
      content: |
        source $prefix/grub.cfg-$net_default_mac
      dest: '{{ pxe_installer_tftpd_root }}/{{ item.0 }}_{{ item.1 }}/{{ item.2 }}/grub/grub.cfg'
      mode: u=rw,g=r,o=r
      owner: root
      group: root
    loop:
    - ['Ubuntu', '18.04', 'amd64']
    - ['Ubuntu', '20.04', 'amd64']

  - name: Create host-specific pxelinux config for Ubuntu 18.04 LTS (Bionic Beaver)
    when: hostvars[item]['distribution_id'] == ['Ubuntu', '18.04'] and hostvars[item]['os_architecture'] == 'x86_64'
    copy:
      content: |
        default install
        timeout 20
        prompt 0
        menu hshift 4
        menu width 70
        menu title Ubuntu installer menu (BIOS mode)
        label install
              menu label Ubuntu 18.04 LTS (Bionic Beaver) Preseed (BIOS, AMD64)
              kernel /ubuntu-installer/amd64/linux
              append initrd=/ubuntu-installer/amd64/initrd.gz ip=dhcp auto=true hostname=unassigned-hostname domain=unassigned-domain url={{ pxe_installer_preseed_url }}/Ubuntu_18.04/amd64/preseed.cfg-{{ hostvars[item]['pxe_installer_client_mac']|lower|replace(':','-') }} {{ hostvars[item]['pxe_installer_kernel_parameters'] if 'pxe_installer_kernel_parameters' in hostvars[item] else pxe_installer_kernel_parameters_ubuntu_1804_amd64 }} ---
      dest: "{{ pxe_installer_tftpd_root }}/Ubuntu_18.04/amd64/pxelinux.cfg/01-{{ hostvars[item]['pxe_installer_client_mac']|lower|replace(':','-') }}"
      mode: u=rw,g=r,o=r
      owner: root
      group: root
    loop: '{{ pxe_installer_clients }}'

  - name: Create host-specific grub config for Ubuntu 18.04 LTS (Bionic Beaver)
    when: hostvars[item]['distribution_id'] == ['Ubuntu', '18.04'] and hostvars[item]['os_architecture'] == 'x86_64'
    copy:
      content: |
        set timeout=5

        if loadfont font.pf2; then
          set gfxmode=800x600
          set gfxpayload=keep
          terminal_output gfxterm
        fi

        set menu_color_normal=cyan/blue
        set menu_color_highlight=white/blue

        menuentry 'Ubuntu 18.04 LTS (Bionic Beaver) Preseed (UEFI, AMD64)' {
            set background_color=black
            linux /Ubuntu_18.04/amd64/ubuntu-installer/amd64/linux ip=dhcp auto=true hostname=unassigned-hostname domain=unassigned-domain url={{ pxe_installer_preseed_url }}/Ubuntu_18.04/amd64/preseed.cfg-{{ hostvars[item]['pxe_installer_client_mac']|lower|replace(':','-') }} {{ hostvars[item]['pxe_installer_kernel_parameters'] if 'pxe_installer_kernel_parameters' in hostvars[item] else pxe_installer_kernel_parameters_ubuntu_1804_amd64 }} ---
            initrd /Ubuntu_18.04/amd64/ubuntu-installer/amd64/initrd.gz
        }
      dest: "{{ pxe_installer_tftpd_root }}/Ubuntu_18.04/amd64/grub/grub.cfg-{{ hostvars[item]['pxe_installer_client_mac']|lower }}"
      mode: u=rw,g=r,o=r
      owner: root
      group: root
    loop: '{{ pxe_installer_clients }}'

  - name: Create host-specific pxelinux config for Ubuntu 20.04 LTS (Focal Fossa)
    when: hostvars[item]['distribution_id'] == ['Ubuntu', '20.04'] and hostvars[item]['os_architecture'] == 'x86_64'
    copy:
      content: |
        default install
        timeout 20
        prompt 0
        menu hshift 4
        menu width 70
        menu title Ubuntu installer menu (BIOS mode)
        label install
              menu label Ubuntu 20.04 LTS (Focal Fossa) Autoinstall (BIOS, AMD64)
              kernel /casper/vmlinuz
              append initrd=/casper/initrd ip=dhcp url={{ pxe_installer_files_ubuntu_2004_amd64.iso }} autoinstall ds=nocloud-net;s={{ pxe_installer_cloudinit_url }}/cloud-init/{{ hostvars[item]['pxe_installer_client_mac']|lower|replace(':','-') }}/ {{ hostvars[item]['pxe_installer_kernel_parameters'] if 'pxe_installer_kernel_parameters' in hostvars[item] else pxe_installer_kernel_parameters_ubuntu_2004_amd64 }} ---
      dest: "{{ pxe_installer_tftpd_root }}/Ubuntu_20.04/amd64/pxelinux.cfg/01-{{ hostvars[item]['pxe_installer_client_mac']|lower|replace(':','-') }}"
      mode: u=rw,g=r,o=r
      owner: root
      group: root
    loop: '{{ pxe_installer_clients }}'

  - name: Create host-specific grub config for Ubuntu 20.04 LTS (Focal Fossa)
    when: hostvars[item]['distribution_id'] == ['Ubuntu', '20.04'] and hostvars[item]['os_architecture'] == 'x86_64'
    copy:
      content: |
        set timeout=5

        if loadfont font.pf2; then
          set gfxmode=800x600
          set gfxpayload=keep
          terminal_output gfxterm
        fi

        set menu_color_normal=cyan/blue
        set menu_color_highlight=white/blue

        menuentry 'Ubuntu 20.04 LTS (Focal Fossa) Autoinstall (UEFI, AMD64)' {
            set background_color=black
            linux /Ubuntu_20.04/amd64/casper/vmlinuz ip=dhcp url={{ pxe_installer_files_ubuntu_2004_amd64.iso }} autoinstall 'ds=nocloud-net;s={{ pxe_installer_cloudinit_url }}/cloud-init/{{ hostvars[item]['pxe_installer_client_mac']|lower|replace(':','-') }}/' {{ hostvars[item]['pxe_installer_kernel_parameters'] if 'pxe_installer_kernel_parameters' in hostvars[item] else pxe_installer_kernel_parameters_ubuntu_2004_amd64 }} ---
            initrd /Ubuntu_20.04/amd64/casper/initrd
        }
      dest: "{{ pxe_installer_tftpd_root }}/Ubuntu_20.04/amd64/grub/grub.cfg-{{ hostvars[item]['pxe_installer_client_mac']|lower }}"
      mode: u=rw,g=r,o=r
      owner: root
      group: root
    loop: '{{ pxe_installer_clients }}'

  - name: Create host-specific preseed config
    when: hostvars[item]['distribution_id'] in [['Ubuntu', '18.04']]
          and hostvars[item]['os_architecture'] == 'x86_64'
    template:
      dest: "{{ pxe_installer_tftpd_root }}/{{ hostvars[item]['distribution_id']|join('_') }}/amd64/preseed.cfg-{{ hostvars[item]['pxe_installer_client_mac']|lower|replace(':','-') }}"
      group: root
      mode: u=rw,g=r,o=r
      owner: root
      src: preseed.cfg.j2
    loop: '{{ pxe_installer_clients }}'

  - name: Create httpd subdirectories
    when: hostvars[item]['distribution_id'] in [['Ubuntu', '20.04']]
          and hostvars[item]['os_architecture'] == 'x86_64'
    file:
      path: "{{ pxe_installer_httpd_root }}/cloud-init/{{ hostvars[item]['pxe_installer_client_mac']|lower|replace(':','-') }}"
      state: directory
      mode: u=rwx,g=rx,o=rx
      owner: root
      group: nogroup
    loop: "{{ pxe_installer_clients }}"

  - name: Create host-specific cloud-init data
    when: hostvars[item.0]['distribution_id'] in [['Ubuntu', '20.04']]
          and hostvars[item.0]['os_architecture'] == 'x86_64'
          and ('cloudinit_' + item.1|replace('-','')) in hostvars[item.0]
    template:
      dest: "{{ pxe_installer_httpd_root }}/cloud-init/{{ hostvars[item.0]['pxe_installer_client_mac']|lower|replace(':','-') }}/{{ item.1 }}"
      group: root
      mode: u=rw,g=r,o=r
      owner: root
      src: '{{ item.1 }}.j2'
    loop: "{{ pxe_installer_clients|product(['meta-data', 'user-data', 'vendor-data'])|list }}"
