---
# Copyright (c) 2020-2021 Jakob Meng, <jakobmeng@web.de>
# vim:set fileformat=unix tabstop=2 shiftwidth=2 expandtab:
# kate: end-of-line unix; space-indent on; indent-width 2; remove-trailing-spaces modified;

- name: Stop and delete libvirt storage pools
  loop: '{{ libvirt_pools|default([]) }}'
  community.libvirt.virt_pool:
    name: '{{ item.name|mandatory }}'
    state: undefined
    uri: '{{ libvirt_uri }}'
  when: item.state|default('present') == 'absent'

- name: Create libvirt storage pools using jm1.libvirt.pool
  loop: '{{ libvirt_pools|default([]) }}'
  jm1.libvirt.pool:
    hardware: '{{ item.hardware|default(omit) }}'
    name: '{{ item.name|mandatory }}'
    state: present
    uri: '{{ libvirt_uri }}'
  when: item.state|default('present') != 'absent'
        and 'xml' not in item
        and 'xml_file' not in item
        and 'xml_var' not in item
  notify:
  - 'Start libvirt storage pools'

- name: Create/Modify libvirt storage pools using jm1.libvirt.pool_xml
  loop: '{{ libvirt_pools|default([]) }}'
  jm1.libvirt.pool_xml:
    ignore: '{{ item.ignore|default(omit) }}'
    state: present
    uri: '{{ libvirt_uri }}'
    # We want to be able to use the loop variable 'item' within the xml string, i.e. the xml string might be a Jinja2
    # template. If we would pass the templated xml string directly, then Ansible would evaluate the template before the
    # loop variable 'item' is available, hence we could not use 'item' in the Jinja2 template. As a workaround we use
    # an indirection with lookup('vars',...) which evaluates the template when 'item' is set.
    xml: "{{ item.xml if item.xml|default(None) != None else
             lookup('template', item.xml_file) if item.xml_file|default(None) != None else
             lookup('vars', item.xml_var) }}"
  when: item.state|default('present') != 'absent' and ('xml' in item or 'xml_file' in item or 'xml_var' in item)
  register: jm1_libvirt_pool_xml_result
  notify:
  - 'Stop libvirt storage pools for changes to take effect'
  - 'Start/Stop libvirt storage pools'

- name: Autostart libvirt storage pools
  loop: '{{ libvirt_pools|default([]) }}'
  community.libvirt.virt_pool:
    autostart: '{{ item.autostart|default(no) }}'
    name: '{{ item.name|mandatory }}'
    uri: '{{ libvirt_uri }}'
  when: item.state|default('present') != 'absent'

- name: Start/Stop storage spools now
  meta: flush_handlers

- name: Debug role variables
  debug:
    msg:
      jm1_libvirt_pool_xml_result: '{{ jm1_libvirt_pool_xml_result }}'
  tags:
    - never
    - debug
