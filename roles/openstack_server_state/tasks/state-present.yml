---
# Copyright (c) 2020-2021 Jakob Meng, <jakobmeng@web.de>
# vim:set fileformat=unix tabstop=2 shiftwidth=2 expandtab:
# kate: end-of-line unix; space-indent on; indent-width 2; remove-trailing-spaces modified;

- name: Fail if vars have invalid values
  ansible.builtin.fail:
  when: >
    openstack_server_state not in ['active', 'paused', 'suspended', 'shutoff', 'shelved', 'shelved_offloaded']

- name: Load server facts
  ansible.builtin.include_tasks: "server_info.yml"

- name: Wait for pending host operations and reload server facts
  when: openstack_server_info.status in
      ['BUILD', 'HARD_REBOOT', 'MIGRATING', 'REBOOT', 'RESIZE', 'REVERT_RESIZE', 'VERIFY_RESIZE']
  block:
  - name: Wait for host to become usable
    ansible.builtin.wait_for:
      port: '{{ ansible_port | default(22) }}'
      host: '{{ ansible_host | default(openstack_server_name) }}'
      search_regex: OpenSSH
      connect_timeout: '{{ connection_timeout }}'
      delay: '{{ connection_delay if openstack_server_info == None else 0 }}'
    retries: '{{ connection_retries }}'
    vars:
      ansible_connection: local
      # For local connections use Python interpreter that is being used by Ansible on the controller.
      #
      # Rationale:
      # For local connections Ansible will not necessarily use the same Python interpreter that is being used by Ansible
      # on the controller. If Ansible on the controller is run from a virtual environment aka virtualenv, then Ansible
      # will use interpreter discovery to choose a Python interpreter for local connections anyway. To reuse the Python
      # interpreter from the controller, ansible_python_interpreter has to be set to ansible_playbook_python explicitly.
      #
      # Ref.:
      #  https://github.com/ansible/ansible/issues/16724
      #  https://willthames.github.io/2018/07/01/connection-local-vs-delegate_to-localhost.html
      #  https://docs.ansible.com/ansible/latest/user_guide/playbooks_delegation.html
      #  https://docs.ansible.com/ansible/latest/reference_appendices/interpreter_discovery.html
      ansible_python_interpreter: "{{ ansible_playbook_python }}"

  - name: Reload server facts
    ansible.builtin.include_tasks: "server_info.yml"

- name: Fail if server is in unsupported state
  ansible.builtin.fail:
    msg: "Server state {{ openstack_server_info.status }} is not supported"
  when: openstack_server_info.status not in ['ACTIVE', 'PAUSED', 'SHUTOFF', 'SHELVED', 'SHELVED_OFFLOADED', 'SUSPENDED']

- name: Unpause server
  openstack.cloud.server_action:
    action: unpause
    auth: '{{ openstack_auth }}'
    cloud: '{{ openstack_cloud }}'
    interface: '{{ openstack_interface | default(omit) }}'
    server: '{{ openstack_server_name }}'
  when: openstack_server_state == 'active' and openstack_server_info.status == 'PAUSED'

- name: Resume server
  openstack.cloud.server_action:
    action: resume
    auth: '{{ openstack_auth }}'
    cloud: '{{ openstack_cloud }}'
    interface: '{{ openstack_interface | default(omit) }}'
    server: '{{ openstack_server_name }}'
  when: openstack_server_state == 'active' and openstack_server_info.status == 'SUSPENDED'

- name: Unshelve server
  openstack.cloud.server_action:
    action: unshelve
    auth: '{{ openstack_auth }}'
    cloud: '{{ openstack_cloud }}'
    interface: '{{ openstack_interface | default(omit) }}'
    server: '{{ openstack_server_name }}'
  when: openstack_server_state == 'active' and openstack_server_info.status in ['SHELVED', 'SHELVED_OFFLOADED']

- name: Start server
  openstack.cloud.server_action:
    action: start
    auth: '{{ openstack_auth }}'
    cloud: '{{ openstack_cloud }}'
    interface: '{{ openstack_interface | default(omit) }}'
    server: '{{ openstack_server_name }}'
  when: openstack_server_state == 'active' and openstack_server_info.status == 'SHUTOFF'

- name: Pause server
  openstack.cloud.server_action:
    action: pause
    auth: '{{ openstack_auth }}'
    cloud: '{{ openstack_cloud }}'
    interface: '{{ openstack_interface | default(omit) }}'
    server: '{{ openstack_server_name }}'
  when: openstack_server_state == 'paused' and openstack_server_info.status != 'PAUSED'

- name: Suspend server
  openstack.cloud.server_action:
    action: suspend
    auth: '{{ openstack_auth }}'
    cloud: '{{ openstack_cloud }}'
    interface: '{{ openstack_interface | default(omit) }}'
    server: '{{ openstack_server_name }}'
  when: openstack_server_state == 'suspended' and openstack_server_info.status != 'PAUSED'

- name: Shelve server
  openstack.cloud.server_action:
    action: shelve
    auth: '{{ openstack_auth }}'
    cloud: '{{ openstack_cloud }}'
    interface: '{{ openstack_interface | default(omit) }}'
    server: '{{ openstack_server_name }}'
  when: openstack_server_state == 'shelved' and openstack_server_info.status not in ['SHELVED', 'SHELVED_OFFLOADED']

- name: Stop server
  openstack.cloud.server_action:
    action: stop
    auth: '{{ openstack_auth }}'
    cloud: '{{ openstack_cloud }}'
    interface: '{{ openstack_interface | default(omit) }}'
    server: '{{ openstack_server_name }}'
  when: openstack_server_state == 'shutoff' and openstack_server_info.status != 'SHUTOFF'
